tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('ADM' %in% tmpList)
study <- c(study, unique(tmp$STUDY))
})
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('ADM' %in% tmpList)
return(unique(tmp$STUDY))
})
x
head(x)
length(x)
head(geneList)
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('LCE3A' %in% tmpList)
return(unique(tmp$STUDY))
})
length(x)
x
head(x)
head(geneList)
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('TNFAIP3' %in% tmpList)
return(unique(tmp$STUDY))
})
x <- sapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('TNFAIP3' %in% tmpList)
return(unique(tmp$STUDY))
})
?sapply
study <- c()
x <- c(study, sapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('TNFAIP3' %in% tmpList)
return(unique(tmp$STUDY))
}))
x
x <- c(study, sapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('TNFAIP3' %in% tmpList)
return(unique(tmp$STUDY))
}))
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('TNFAIP3' %in% tmpList)
unique(tmp$STUDY)
})
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('FAP' %in% tmpList)
unique(tmp$STUDY)
})
x
x != NULL
x[!unlist(lapply(x, is.null))]
length(x[!unlist(lapply(x, is.null))])
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('TNFAIP3' %in% tmpList)
unique(tmp$STUDY)
})
length(x[!unlist(lapply(x, is.null))])
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('LCE3B' %in% tmpList)
unique(tmp$STUDY)
})
length(x[!unlist(lapply(x, is.null))])
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('LCE3A' %in% tmpList)
unique(tmp$STUDY)
})
length(x[!unlist(lapply(x, is.null))])
x[!unlist(lapply(x, is.null))]
input$gene = 'BRCA'
a[names(a) == 'BRCA']
a[names(a) == 'LDE']
a[names(a) == 'GDF5']
x <- lapply(split(1:nrow(gwas), gwas$STUDY), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('GDF5' %in% tmpList)
unique(tmp$STUDY)
})
v <- c(a[names(a) == input$gene],length(x[!unlist(lapply(x, is.null))]))
v <- c(a[names(a) == 'input$gene'GDF5],length(x[!unlist(lapply(x, is.null))]))
v <- c(a[names(a) == 'GDF5'],length(x[!unlist(lapply(x, is.null))]))
v
barplot(v)
names(v) <- c('no. of GWAS hits','no. of GWAS studies')
barplot(v)
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
v
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
a[names(a) == 'MGMT']
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('MGMT' %in% tmpList)
unique(tmp$DISEASE.TRAIT)
})
v <- c(a[names(a) == 'MGMT'],length(x[!unlist(lapply(x, is.null))]))
v
names(v) <- c('no. of GWAS hits','no. of GWAS disease traits implicated')
barplot(v)
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
unique(tmp$DISEASE.TRAIT)
})
v <- c(a[names(a) == 'UMOD'],length(x[!unlist(lapply(x, is.null))]))
v
names(v) <- c('no. of GWAS hits','no. of GWAS disease traits implicated')
barplot(v)
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
unique(tmp$DISEASE.TRAIT)
})
x[!unlist(lapply(x, is.null))]
names(x[!unlist(lapply(x, is.null))])
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
list(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == input$gene)])
})
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
list(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
x
x[!unlist(lapply(x, is.null))]
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
c(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
x[!unlist(lapply(x, is.null))]
z <- x[!unlist(lapply(x, is.null))]
as.data.frame(z)
reshape(z)
df <- data.frame(matrix(unlist(z), nrow=132, byrow=T))
View(df)
df <- data.frame(matrix(unlist(z), nrow=length(z), byrow=T))
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
c(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
x[!unlist(lapply(x, is.null))]
which(gwas$DISEASE.TRAIT == 'Renal function-related traits (sCR)')
gwas[which(gwas$DISEASE.TRAIT == 'Renal function-related traits (sCR)'),]
View(gwas[which(gwas$DISEASE.TRAIT == 'Renal function-related traits (sCR)'),])
View(gwas[which(gwas$DISEASE.TRAIT == 'Renal function and chronic kidney disease'),])
z$`Chronic kidney disease`
df <- df[,-1]
View(df)
df <- max(df)
df
df <- data.frame(matrix(unlist(z), nrow=length(z), byrow=T))
View(df)
df <- df[,-1]
df <- apply(df, 1, min)
df
names(z)
View(gwas[which(gwas$DISEASE.TRAIT == 'Urinary uromodulin levels'),])
z
df <- data.frame(matrix(unlist(z), nrow=length(z)))
unlist(z)
z
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
data.frame(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
matrix(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
list(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
z <-x[!unlist(lapply(x, is.null))]
df <- data.frame(matrix(unlist(z), nrow=length(z)))
View(df)
names(z)
z
data.frame(ID = rep(names(z), sapply(z, length)),
Obs = unlist(z))
library(reshape2)
melt(z)
df1 <- melt(z)
View(df1)
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
list(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')][[1]])
})
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
list(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')][1])
})
z <-x[!unlist(lapply(x, is.null))]
z
df1 <- melt(z)
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
c(disease.trait=unique(tmp$DISEASE.TRAIT),p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')][1])
})
z <-x[!unlist(lapply(x, is.null))]
df1 <- melt(z)
z
View(gwas[which(gwas$DISEASE.TRAIT == 'Glomerular filtration rate (cystatin C)'),])
View(gwas[which(gwas$DISEASE.TRAIT == 'Kidney function decline traits'),])
View(gwas[which(gwas$DISEASE.TRAIT == '$`Chronic kidney disease and serum creatinine levels`'),])
View(gwas[which(gwas$DISEASE.TRAIT == 'Chronic kidney disease and serum creatinine levels'),])
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
list(p.value=tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')])
})
z <-x[!unlist(lapply(x, is.null))]
z
melt(z)
t <- melt(z)
View(gwas[which(gwas$DISEASE.TRAIT %in% t$L1),])
t
library(dplyr)
ddply(t, 'L1',min)
library(plyr)
ddply(t, 'L1',min)
t[,-2]
t <- t[,-2]
ddply(t, 'L1',min)
aggregate(x = t, by = t$L1, min)
unique(t)
split(nrow)
split(nrow(t), t$L1)
t %>% group_by(L1)
t %>% group_by(L1) %>% min
t %>% group_by(L1) %>% min()
t %>% group_by(L1) %>% summarise_all(min())
t %>% group_by(L1) %>% with(pmin())
t %>% group_by(L1) %>% with(pmin)
do.call(pmin, t)
t
lapply(split(1:nrow(t), t$L1), function(x) do.call(pmin, x))
split(1:nrow(t), t$L1)
lapply(split(1:nrow(t), t$L1), function(x)
tmp <- t[,x]
do.call(pmin, tmp))
lapply(split(1:nrow(t), t$L1), function(x) {
tmp <- t[,x]
do.call(pmin, tmp)})
?pmin()
pmin(c(123,456))
min(c(123,456))
lapply(split(1:nrow(t), t$L1), function(x) {
tmp <- t[,x]
do.call(min, tmp)})
View(t)
lapply(split(1:nrow(t), t$L1), function(x) {
tmp <- t[,x]
do.call(min, tmp$value)})
View(t)    x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
c(tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')][1])
})
View(t)    x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
c(tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')][1])
})
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('UMOD' %in% tmpList)
c(tmp$P.VALUE[which(tmp$REPORTED.GENE.S == 'UMOD')][1])
})
z <-x[!unlist(lapply(x, is.null))]
df <- melt(z)
View(df)
View(gwas[which(gwas$DISEASE.TRAIT == 'Kidney function decline traits'),])
df <- df[complete.cases(df),]
barplot(df)
rownames(df) <- df$L1
df <- df[,-2]
barplot(df)
df <- melt(z)
df <- df[complete.cases(df),]
df$pvalue <- -log10(df$value)
df
-log10(8e-73)
barplot(df$pvalue)
barplot(df$pvalue, names.arg = df$L1)
barplot(df$pvalue, names.arg = df$L1, angle = 90)
barplot(df$pvalue, names.arg = df$L1, angle = 45)
df <- df[order(df$pvalue),]
df <- df[order(df$pvalue, decreasing = TRUE),]
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
geneList <- unlist(lapply(as.character(gwas$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
length(geneList)
if('intergenic' %in% geneList){
geneList <-  geneList[-which(geneList=='intergenic')]
}
a <- table(geneList)
max(a)
sort(a)
head(sort(a))
head(order(a))
head(a)
head(a,20)
sort(a)
head(sort(a))
head(sort(a, decreasing = T))
geneList <- unlist(lapply(as.character(gwas$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if(c('Intergenic','intergenic') %in% geneList ){
geneList <-  geneList[-which(geneList=='intergenic')]
}
geneList <- unlist(lapply(as.character(gwas$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% geneList ){
geneList <-  geneList[-which(geneList=='intergenic')]
}
if('Intergenic' %in% geneList ){
geneList <-  geneList[-which(geneList=='Intergenic')]
}
length(geneList)
geneList <- unlist(lapply(as.character(gwas$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% geneList ){
geneList <-  geneList[-which(geneList=='intergenic')]
}
length(geneList)
if('Intergenic' %in% geneList ){
geneList <-  geneList[-which(geneList=='Intergenic')]
}
length(geneList)
a <- table(geneList)
a[names(a) == input$gene]
head(sort(a, decreasing = T))
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('Intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if(input$gene %in% tmpList)
unique(tmp$DISEASE.TRAIT)
})
x <- lapply(split(1:nrow(gwas), gwas$DISEASE.TRAIT), function(y){
tmp <- gwas[y,]
tmpList <- unlist(lapply(as.character(tmp$REPORTED.GENE.S.), function(x) ifelse(grepl(',',x),strsplit(x, ",", fixed = TRUE),x)))
if('intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='intergenic')]
}
if('Intergenic' %in% tmpList){
tmpList <-  tmpList[-which(tmpList=='Intergenic')]
}
if("HIF3A" %in% tmpList)
unique(tmp$DISEASE.TRAIT)
})
v <- c(a[names(a) == input$gene],length(x[!unlist(lapply(x, is.null))]))
x[!unlist(lapply(x, is.null))])
x[!unlist(lapply(x, is.null))]
length(x[!unlist(lapply(x, is.null))])
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
shiny::runApp('C:/Users/user/GWAS-scRNAseq-Integration/R')
